prototype(Jonnitto.PrettyEmbedVideoPlatforms:Content.Video) < prototype(Jonnitto.PrettyEmbedHelper:Content) {
    package = 'VideoPlatforms'

    platform = ${q(node).property('platform')}
    type = ${q(node).property('type')}
    videoID = ${q(node).property('videoID')}

    metadataID = ${q(node).property('metadataID')}
    alternativeText = ${q(node).property('metadataTitle')}
    imageFromPlatform = ${q(node).property('metadataImage')}
    thumbnailFromResources = ${q(node).property('metadataThumbnail')}
    ratio = ${q(node).property('metadataRatio')}
    async = true

    force16to9 = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'force16to9'
    }

    loadImageStrategy = ${Configuration.setting('Jonnitto.PrettyEmbedVideoPlatforms.loadImageStrategy')}
    enableGdprMessage = ${Configuration.setting('Jonnitto.PrettyEmbedHelper.enableGdprMessage')}
    gdprMessage = Jonnitto.PrettyEmbedHelper:GdprMessage

    // Vimeo specific
    autopause = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'autopause'
    }
    color = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'color'
    }
    background = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'background'
    }
    transparent = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'transparent'
    }
    previewTitle = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'previewTitle'
    }
    previewByline = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'previewByline'
    }
    previewPortrait = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'previewPortrait'
    }

    // Youtube specific
    closedCaptions = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'closedCaptions'
    }
    showRelated = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'showRelated'
    }


    /*
        These properties are already defined in Jonnitto.PrettyEmbedHelper:Content
        - maximumWidth
        - wrapper
        - origin
        - image
        - lightbox
        - preserveAspectRatio
        - playsinline
        - loop
        - controls
        - muted
    */

    // Internal
    videoID.@process.getIDFromUrl = ${this.metadataID ? this.metadataID : (value && this.platform ? Jonnitto.PrettyEmbedHelper.platformID(value, this.platform) : value)}

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}
        poster = Neos.Fusion:Case {
            hasPersisantResource {
                condition = ${props.image || props.thumbnailFromResources}
                renderer = Neos.Neos:ImageUri {
                    asset = ${props.image || props.thumbnailFromResources}
                    async = ${props.async}
                    maximumWidth = ${props.maximumWidth}
                }
            }
            imageFromVimeo {
                condition = ${props.videoID && props.platform == 'vimeo'}
                renderer = ${props.imageFromPlatform || Jonnitto.PrettyEmbedHelper.vimeoThumbnail(props.videoID)}
            }
            imageFromPlatform {
                condition = ${props.videoID}
                renderer = ${props.imageFromPlatform}
            }
        }
        poster2x = Neos.Neos:ImageUri {
            @if {
                hasAsset = ${this.asset}
                hasEnoughPixel = ${this.asset.width >= props.maximumWidth * 2}
            }
            asset = ${props.image || props.thumbnailFromResources}
            async = ${props.async}
            maximumWidth = ${props.maximumWidth * 2}
        }
        renderer = Neos.Fusion:Case {
            noVideoID {
                condition = ${!props.videoID || !props.platform}
                renderer = Jonnitto.PrettyEmbedHelper:Notification {
                    key = 'noVideoID'
                    default = 'Please add a Video URL / ID or url in the inspector'
                }
            }
            noPoster {
                condition = ${!props.poster && (props.platform == 'youtube' ? props.type == 'playlist' : true)}
                renderer = Jonnitto.PrettyEmbedHelper:Notification {
                    key = 'needPreviewImage'
                    default = 'You need to define a custom preview image.'
                }
            }
            default {
                condition = true
                renderer = afx`<Jonnitto.PrettyEmbedVideoPlatforms:Component.Video {...props} live={node.context.live} />`
            }
        }
    }
}
